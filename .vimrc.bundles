" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" set the runtime path to include Vundle and initialize
if exists('g:exvim_dev')
    set rtp+=./vimfiles/bundle/vundle/
    let path='./vimfiles/bundle/'
    call vundle#rc(path)
else
    set rtp+=~/.vim/bundle/vundle/
    let path='~/.vim/bundle/'
    call vundle#rc(path)
endif

" let Vundle manage Vundle, required
Bundle 'gmarik/vundle'

"}}}

" general plugins {{{

" ex-config:
Bundle 'exvim/ex-config'

" ex-utility:
Bundle 'exvim/ex-utility'
nnoremap <unique> <silent> <Leader>bd :EXbd<CR>
nnoremap <unique> <silent> <C-l> :EXbn<CR>
nnoremap <unique> <silent> <C-h> :EXbp<CR>
nnoremap <unique> <silent> <C-Tab> :EXbalt<CR>
nnoremap <unique> <silent> <Leader><Tab> :EXwp<CR>

" ex-aftercolor
Bundle 'exvim/ex-aftercolors'

" ex-vimentry
Bundle 'exvim/ex-vimentry'

" ex-project
Bundle 'exvim/ex-project'
nnoremap <unique> <leader>fc :EXProjectFind<CR>
if has('gui_running')
    if has ('mac')
        nnoremap <unique> Ø :EXProjectOpen<CR>:redraw<CR>/
    else
        nnoremap <unique> <M-O> :EXProjectOpen<CR>:redraw<CR>/
    endif
endif

" ex-gsearch
Bundle 'exvim/ex-gsearch'
nnoremap <unique> <leader>gs :EXGSearchToggle<CR>
nnoremap <unique> <leader>gg :EXGSearchCWord<CR>
nnoremap <unique> <Leader><S-f> :GS 

" " ex-tagselect
" TODO: Bundle 'exvim/ex-tagselect'
nnoremap <unique> <leader>] :exec 'ts ' . expand('<cword>')<CR>

" ex-showmarks: invoke by m... or <leader>mm, <leader>ma
Bundle 'exvim/ex-showmarks'
" TODO: bootleq/ShowMarks on github is well organized in code, but have lots 
" bugs, consider merge his code and fixes the bugs 
let g:showmarks_enable = 1
let g:showmarks_include = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
let g:showmarks_ignore_type = 'hqm' " Ignore help, quickfix, non-modifiable buffers
" Hilight lower & upper marks
let g:showmarks_hlline_lower = 1
let g:showmarks_hlline_upper = 0 

" ex-visincr: invoke when select text and type ':II'
Bundle 'exvim/ex-visincr'

" ex-matchit: invoke by %
Bundle 'exvim/ex-matchit'

" ex-easyhl:
Bundle 'exvim/ex-easyhl'

" searchcompl: invoke by /
Bundle 'exvim/ex-searchcompl'

" ex-colorschemes
Bundle 'exvim/ex-colorschemes'

" vim-color-solarized
Bundle 'altercation/vim-colors-solarized'
if !has('gui_running')
    let g:solarized_termcolors = 256
endif

" vim-airline
Bundle 'bling/vim-airline'
if has('gui_running')
    let g:airline_powerline_fonts = 1
else
    let g:airline_powerline_fonts = 0
endif
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnamemod = ':t'
" let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" let g:airline_section_c = '%t'
let g:airline_section_warning = airline#section#create(['syntastic'])

" ctrlp: invoke by <ctrl-p>
Bundle 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'

" vim-fugitive: invoke most by :Gdiff
Bundle 'tpope/vim-fugitive'

" vim-surround: invoke when you select words and press 's'
Bundle 'tpope/vim-surround'
xmap s <Plug>VSurround

" Bundle 'tpope/vim-dispatch'

" nerdtree: invoke by :NERDTreeToggle
Bundle 'scrooloose/nerdtree'
if !hasmapto(':EXProjectFind<CR>')
    nnoremap <unique> <leader>fc :NERDTreeFind<CR>
    if has('gui_running') "  the <alt> key is only available in gui mode.
        if has ('mac')
            nnoremap <unique> Ø :NERDTreeFind<CR>:redraw<CR>/
        else
            nnoremap <unique> <M-O> :NERDTreeFind<CR>:redraw<CR>/
        endif
    endif
endif

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>' 

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
Bundle 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <C-F11> <Plug>NERDCommenterUncomment

" syntastic: invoke when you save file and have syntac-checker
Bundle 'scrooloose/syntastic'

" neocomplcache: invoke when you insert words
Bundle 'Shougo/neocomplcache.vim'
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_auto_completion_start_length = 2
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_auto_select = 1 " let neocomplcache's completion behavior like AutoComplPop
" let g:neocomplcache_disable_auto_complete = 1 " Enable this if you like TAB for complete
" inoremap <C-p> <C-x><C-u>
" inoremap <expr><TAB>  pumvisible() ? '\<Down>' : '<TAB>'
" inoremap <expr><S-TAB>  pumvisible() ? '\<Up>' : ''

" TODO: choose a snippet plugin
" Bundle 'Shougo/neosnippet.vim'
" Bundle 'msanders/snipmate.vim'
" Bundle 'spf13/snipmate-snippets'

" undotree: invoke by <Leader>u
Bundle 'mbbill/undotree'
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" tagbar: invoke by :Tagbar
Bundle 'majutsushi/tagbar'

" tabular: invoke by <leader>= alignment-character
Bundle 'godlygeek/tabular'
nnoremap <silent> <leader>= :call g:tabular(1)<CR>
xnoremap <silent> <leader>= :call g:tabular(0)<CR>
function! g:tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/ 
Bundle 'Lokaltog/vim-easymotion'
map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
"}}}

" c-lang {{{

" ex-cref: invoke by <leader>cr
Bundle 'exvim/ex-cref'

" this is modified for default c syntax highlight settings 
" make it don't highlight error pattern
let c_gnu = 1
let c_no_curly_error = 1
let c_no_bracket_error = 1

"}}}

" web {{{

" TODO: Bundle 'skammer/vim-css-color'
" TODO: Bundle 'sindresorhus/focus'
" TODO: Bundle 'mattn/emmet-vim'

" vim-indent-guides: invoke by <leader>ig
Bundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_guide_size = 1

" vim-markdown
Bundle 'plasticboy/vim-markdown'
let g:vim_markdown_initial_foldlevel=9999

"}}}

" TEST {{{

" " test-loading
" echomsg "test-loading: .vimrc"
" Bundle 'exvim/test-loading'

"}}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:
